@page "/usuario"

@using Newtonsoft.Json;
@using GestorDBTFG.Model

<h3>Usuarios</h3>


@if (User == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Contraseña</th>
                <th>Dinero</th>
                <th>Rol</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in User)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Nombre</td>
                    <td>@user.Password</td>
                    <td>@user.Dinero</td>
                    <td>@user.RolId</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UsuarioModel?> User = [];

    protected override async Task OnInitializedAsync()
    {
        var result = new List<UsuarioModel>();
        // Conexión con la BD
        try
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri("http://localhost:5034");
                var response = await client.GetAsync("/api/Usuarios");
                response.EnsureSuccessStatusCode();

                var stringResult = await response.Content.ReadAsStringAsync();
                result = JsonConvert.DeserializeObject<List<UsuarioModel>>(stringResult);
            }
        }
        catch (Exception ex) 
        { Console.WriteLine("Error | " + ex.Message); }

        await Task.Delay(100);

        // int[] Ids = new[] { 1, 2, 3, 4 };
        // string[] Names = new[] { "Pepito", "Juanita", "María", "Pedro" };
        // float[] Moneys = new[] { 100f, 0f, 0f, 0f };
        // int?[] Rols = new int?[] { 1, 2, null, 4 };

        User.AddRange(result);

    }
}